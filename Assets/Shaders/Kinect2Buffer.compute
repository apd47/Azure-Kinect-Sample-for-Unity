// Each #kernel tells which function to compile; you can have many kernels

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
Texture2D<float4> ColorTex;
Texture2D<float4> DepthTex;

Texture2D<float4> oldDepthTexture;
uniform RWStructuredBuffer<float4> ResultBuffer;

SamplerState _PointClamp, _PointRepeat;
int minDepth;
int maxDepth;
float4 filterColor = float4(0.5, 0.5, 0.5, 0.5);
int _MatrixX, _MatrixY, _MatrixZ;
int filterType;

float3 hsv2rgb(float3 c)
{
	float4 K = float4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	float3 p = abs(frac(c.xxx + K.xyz) * 6.0 - K.www);
	return c.z * lerp(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

float3 rgb2hsv(float3 c)
{
	float4 K = float4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
	float4 p = lerp(float4(c.bg, K.wz), float4(c.gb, K.xy), step(c.b, c.g));
	float4 q = lerp(float4(p.xyw, c.r), float4(c.r, p.yzx), step(p.x, c.r));

	float d = q.x - min(q.w, q.y);
	float e = 1.0e-10;
	return float3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

int GetBufferIndex(uint3 indices, uint3 matrixSize) {
	return indices.z * matrixSize.x * matrixSize.y + indices.x * matrixSize.y + indices.y;
}

uint3 GetVolumeIndices(uint index, uint3 matrixSize) {
	uint3 indices = uint3(0, 0, 0);
	indices.z = index / (matrixSize.x * matrixSize.y);
	indices.x = (index - (indices.z * matrixSize.x * matrixSize.y)) / matrixSize.y;
	indices.y = index - (indices.z * matrixSize.x * matrixSize.y) - indices.x * matrixSize.y;
	return indices;
}

#pragma kernel ToBuffer
[numthreads(16, 16, 1)]
void ToBuffer(uint3 id : SV_DispatchThreadID)
{
	uint3 matrixSize = uint3(_MatrixX, _MatrixY, _MatrixZ);

	float3 uv = float3((float)id.x / matrixSize.x, (float)id.y / matrixSize.y, (float)id.z / matrixSize.z);

	float4 col = ColorTex.SampleLevel(_PointClamp, uv.xy, 0);
	uint depth = DepthTex.SampleLevel(_PointClamp, uv.xy, 0).r * 65536;
	uint oldDepth = oldDepthTexture.SampleLevel(_PointClamp, uv.xy, 0).r * 65536;

	float stepSize = ((float)(maxDepth - minDepth) / matrixSize.z);

	int oldDepthIndex = (oldDepth - minDepth) / stepSize;
	uint3 oldIndex = uint3(id.x, matrixSize.y - id.y, oldDepthIndex);
	ResultBuffer[GetBufferIndex(oldIndex, matrixSize)] = float4(0, 0, 0, 0);
	oldIndex = uint3(id.x, matrixSize.y - id.y, oldDepthIndex + 1);
	ResultBuffer[GetBufferIndex(oldIndex, matrixSize)] = float4(0, 0, 0, 0);
	oldIndex = uint3(id.x, matrixSize.y - id.y, oldDepthIndex + 2);
	ResultBuffer[GetBufferIndex(oldIndex, matrixSize)] = float4(0, 0, 0, 0);
	oldIndex = uint3(id.x, matrixSize.y - id.y, oldDepthIndex - 1);
	ResultBuffer[GetBufferIndex(oldIndex, matrixSize)] = float4(0, 0, 0, 0);
	oldIndex = uint3(id.x, matrixSize.y - id.y, oldDepthIndex - 2);
	ResultBuffer[GetBufferIndex(oldIndex, matrixSize)] = float4(0, 0, 0, 0);

	float3 filterMin, filterMax;

	switch (filterType) {
		case 0:
			filterMin = filterColor.rgb - filterColor.a;
			filterMax = filterColor.rgb + filterColor.a;
			if ((filterMin.r <= col.r) && (col.r <= filterMax.r)
				&& (filterMin.g <= col.g) && (col.g <= filterMax.g)
				&& (filterMin.b <= col.b) && (col.b <= filterMax.b))
			{
				if (depth < maxDepth && depth > minDepth)
				{
					int depthIndex = (depth - minDepth) / stepSize;
					uint3 index = uint3(id.x, matrixSize.y - id.y, depthIndex);
					ResultBuffer[GetBufferIndex(index, matrixSize)] = float4(col.rgb, 1);
					//index = uint3(id.x, matrixSize.y - id.y, depthIndex + 1);
					////ResultBuffer[GetBufferIndex(index, matrixSize)] = float4(col.rgb, 0.6);
					////index = uint3(id.x, matrixSize.y - id.y, depthIndex + 2);
					////ResultBuffer[GetBufferIndex(index, matrixSize)] = float4(col.rgb, 0.3);
					////index = uint3(id.x, matrixSize.y - id.y, depthIndex - 1);
					////ResultBuffer[GetBufferIndex(index, matrixSize)] = float4(col.rgb, 0.6);
					////index = uint3(id.x, matrixSize.y - id.y, depthIndex - 2);
					////ResultBuffer[GetBufferIndex(index, matrixSize)] = float4(col.rgb, 0.3);
				}
			}
			break;

		case 1:
			float3 hsvCol = rgb2hsv(col);
			filterMin = filterColor.xyz - filterColor.w;
			filterMax = filterColor.xyz + filterColor.w;
			if ((filterMin.r <= hsvCol.r) && (hsvCol.r <= filterMax.r)
				&& (filterMin.g <= hsvCol.g) && (hsvCol.g <= filterMax.g)
				&& (filterMin.b <= hsvCol.b) && (hsvCol.b <= filterMax.b))
			{
				if (depth < maxDepth && depth > minDepth)
				{
					int depthIndex = (depth - minDepth) / stepSize;
					uint3 index = uint3(id.x, matrixSize.y - id.y, depthIndex);
					ResultBuffer[GetBufferIndex(index, matrixSize)] = float4(col.rgb, 1);
					//index = uint3(id.x, matrixSize.y - id.y, depthIndex + 1);
					//ResultBuffer[GetBufferIndex(index, matrixSize)] = float4(col.rgb, 0.6);
					//index = uint3(id.x, matrixSize.y - id.y, depthIndex + 2);
					//ResultBuffer[GetBufferIndex(index, matrixSize)] = float4(col.rgb, 0.3);
					//index = uint3(id.x, matrixSize.y - id.y, depthIndex - 1);
					//ResultBuffer[GetBufferIndex(index, matrixSize)] = float4(col.rgb, 0.6);
					//index = uint3(id.x, matrixSize.y - id.y, depthIndex - 2);
					//ResultBuffer[GetBufferIndex(index, matrixSize)] = float4(col.rgb, 0.3);
				}
			}
			break;
	}
}



